<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pitch Stats</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .blue {
            color: #0C2340;
        }
        .red {
            color: #BD1F2D;
        }
        th {
            border-bottom: 1px solid gray;
            font-weight: bold; 
            font-size: 1.2em; 
            cursor: pointer;
        }
        th.sorted-asc::after {
            content: ' ▲';
        }
        th.sorted-desc::after {
            content: ' ▼';
        }
        a {
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        h1 {
            text-align: center;
        }
    </style>
</head>
<body>

<h1 class="red">Trackman Pitch Stats</h1>
<form onsubmit="filterData(event);">
    <label>Starting date</label>
    <input type="date" id="startdate" required>
    <label>End date</label>
    <input type="date" id="enddate" required>
    <button type="submit">Filter</button>
</form>

<table id="data-table">
    <thead>
        <tr>
            <th onclick="sortTable(0)">ID</th>
            <th onclick="sortTable(1)">Speed</th>
            <th onclick="sortTable(2)">Result</th>
            <th onclick="sortTable(3)">Datetime</th>
        </tr>
    </thead>
    <tbody>
        <!-- Data will be populated here -->
    </tbody>
</table>

<script>
    let currentSort = {
        column: null,
        direction: 'asc'
    };

    async function fetchData() {
        try {
            const response = await fetch('https://compute.samford.edu/zohauth/clients/datajson');
            const data = await response.json();
            populateTable(data);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    function populateTable(data) {
        const tableBody = document.querySelector('#data-table tbody');
        tableBody.innerHTML = ''; // Clear any existing rows

        data.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td><a href="details.html?id=${item.id}">Pitch ${item.id}</a></td>
                <td>${item.speed}</td>
                <td>${item.result || '--'}</td>
                <td>${item.datetime || '--'}</td>
            `;
            tableBody.appendChild(row);
        });
    }

    function filterData(event) {
        event.preventDefault();
        const startdate = new Date(document.getElementById("startdate").value);
        const enddate = new Date(document.getElementById("enddate").value);
        
        const rows = document.querySelectorAll('#data-table tbody tr');

        rows.forEach(row => {
            const dateCell = row.cells[3].textContent;
            const rowDate = new Date(dateCell);

            if (rowDate >= startdate && rowDate <= enddate) {
                row.style.display = ''; // Show row
            } else {
                row.style.display = 'none'; // Hide row
            }
        });
    }

    function sortTable(columnIndex) {
        const table = document.getElementById("data-table");
        const rows = Array.from(table.rows).slice(1); // Exclude header row
        const isAsc = currentSort.column === columnIndex && currentSort.direction === 'asc';

        // Clear previous sort indicators
        Array.from(table.rows[0].cells).forEach(cell => {
            cell.classList.remove('sorted-asc', 'sorted-desc');
        });

        // Sort rows
        rows.sort((a, b) => {
            const aText = a.cells[columnIndex].textContent;
            const bText = b.cells[columnIndex].textContent;
            return isAsc ? (aText < bText ? 1 : -1) : (aText > bText ? 1 : -1);
        });

        // Append sorted rows back to the table
        rows.forEach(row => table.appendChild(row));

        // Update sort indicators
        currentSort.column = columnIndex;
        currentSort.direction = isAsc ? 'desc' : 'asc';
        table.rows[0].cells[columnIndex].classList.add(isAsc ? 'sorted-desc' : 'sorted-asc');
    }

    // Fetch data on page load
    fetchData();
</script>

</body>
</html>
